{"version":3,"sources":["reportWebVitals.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Withdraw","withdrawMoney","handleWithdraw","withdraw","id","onClick","type","onChange","Number","document","getElementById","value","Deposit","handleDeposit","depositMoney","deposit","ATM","useState","accountBalance","setAccountBalance","setWithdraw","setDeposit","accountHistory","setAccountHistory","isWithdraw","setIsWithdraw","isDeposit","setIsDeposit","handleSelection","event","target","style","backgroundColor","handleHistory","map","item","JSON","stringify","amount","alert","newAmount","account","newwithdraw","newDeposit","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7c355a58.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './App.css';\nimport React, {useState, useEffect} from 'react'\n\nfunction Withdraw({withdrawMoney, handleWithdraw, withdraw}) {\n    return (\n        <div>\n             <div>\n                <h2>Withdraw</h2>\n            </div>\n                <h3>Amount: ${withdraw}</h3>\n            <div>\n            <div>Quick Cash</div>\n            <div  id = 'addStuff'> \n            <div>\n                <button onClick={()=>withdrawMoney(20)}>$20</button>\n                <button onClick={()=>withdrawMoney(80)}>$80</button>\n            </div>\n            <div>\n            <button onClick={()=>withdrawMoney(40)}>$40</button>\n            <button onClick={()=>withdrawMoney(100)}>$100</button>\n            </div>\n            <div>\n                <button onClick={()=>withdrawMoney(60)}>$60</button>\n                <button onClick={()=>withdrawMoney(200)}>$200</button>\n            </div>       \n            <div>\n                <input type = 'number' id = 'withdraw' onChange = {handleWithdraw}></input>\n                <button onClick = {()=>withdrawMoney(Number(document.getElementById('withdraw').value))}>Other Amount</button>\n            \n            </div></div>\n            </div>\n        </div>\n    )\n};\n\nfunction Deposit({handleDeposit, depositMoney, deposit}) {\n    return(\n        <div>\n            <h2>Deposit</h2>\n            <h3>Amount: ${deposit}</h3>\n            <input type = 'number' id = 'deposit' onChange = {handleDeposit}></input>\n            <button type = 'button' onClick = {depositMoney}>Deposit</button>\n        </div>\n    )\n}\n\nfunction ATM() {\n\n    const [accountBalance, setAccountBalance] = useState(0);\n    const [withdraw, setWithdraw] = useState(0);\n    const [deposit, setDeposit] = useState(0);\n    const [accountHistory, setAccountHistory] = useState([]);\n    const [isWithdraw, setIsWithdraw] = useState(false);\n    const [isDeposit, setIsDeposit] = useState(false);\n\n    const withdrawMoney = (amount)=>{\n        if((accountBalance - amount) < 0){\n            return alert(`You don't have the funds!`)\n        }else{\n        let newAmount = accountBalance - amount;\n        setWithdraw(amount);\n        setAccountBalance(newAmount);\n        setAccountHistory([...accountHistory, {withdraw:amount,account:newAmount}]);\n        document.getElementById('withdraw').value = 0;\n        }\n    }\n\n    const handleWithdraw = ()=>{\n        let newwithdraw = document.getElementById('withdraw').value;\n        setWithdraw(newwithdraw);\n    }\n\n    const handleDeposit = ()=>{\n        let newDeposit = document.getElementById('deposit').value;\n        setDeposit(newDeposit);\n    }\n\n    const depositMoney = ()=>{\n        let deposit = Number(document.getElementById('deposit').value);\n        let newAmount = accountBalance + deposit;\n        setAccountBalance(newAmount);\n        setAccountHistory([...accountHistory, {deposit:deposit,account:newAmount}]);\n        setDeposit(0);\n        document.getElementById('deposit').value = 0;\n    }\n    const handleSelection = (event)=>{\n        if (event.target.style.backgroundColor === 'red'){\n            event.target.style.backgroundColor = 'white'\n            setIsWithdraw(false);\n            setIsDeposit(false);\n        }else{\n            event.target.style.backgroundColor = 'red';\n            if(event.target === document.getElementById('withdrawBtn') && document.getElementById('withdrawBtn').style.backgroundColor === 'red'){\n                document.getElementById('depositBtn').style.backgroundColor = 'white';\n                setIsWithdraw(true);\n                setIsDeposit(false);\n            }else{ \n                document.getElementById('depositBtn').style.backgroundColor = 'red'\n                document.getElementById('withdrawBtn').style.backgroundColor = 'white'\n                setIsWithdraw(false);\n                setIsDeposit(true);\n            }    \n        }\n\n    }\n\n    const handleHistory = accountHistory.map((item)=>{\n        return (\n            <li>{JSON.stringify(item)}</li>\n        )\n    });\n\n    return (\n        <div>\n            <h1>Account Balance: ${accountBalance}</h1>\n            <div>\n            <div>Would you like to</div>\n            <div>\n                <button onClick={handleSelection} id = 'withdrawBtn'>Withdraw</button>\n                <button onClick={handleSelection} id = 'depositBtn'>Deposit</button>\n                ?\n            </div>\n            {isWithdraw && <Withdraw withdrawMoney = {withdrawMoney} handleWithdraw = {handleWithdraw} withdraw = {withdraw}/>}\n            {isDeposit && <Deposit depositMoney = {depositMoney} handleDeposit = {handleDeposit}  deposit = {deposit} />}\n            <div id = 'history'>\n                <ul>\n                    <h3>Account History</h3>\n                {handleHistory}\n                </ul>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default ATM\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport ATM from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ATM />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}