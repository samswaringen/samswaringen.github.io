{"version":3,"sources":["reportWebVitals.js","components/ATM.js","components/FetchData.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ATM","totalDataArr","nameArr","MapCoins","coinData","total","figureDom","value","toFixed","dataArr","map","item","push","Number","priceUsd","length","index","len","splice","genDataArr","coin","className","name","id","toLocaleString","marketCapUsd","supply","maxSupply","changePercent24Hr","data","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","rank","options","title","display","text","fontSize","legend","position","FetchData","useState","totalVal","setTotalVal","setCoinData","timer","setTimer","fetchData","a","axios","result","resArr","useEffect","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb9899e9.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState, useEffect} from 'react'\r\nimport '../App.css'; \r\n\r\nfunction Withdraw({withdrawMoney, handleWithdraw, withdraw}) {\r\n    return (\r\n        <div>\r\n             <div>\r\n                <h2>Withdraw</h2>\r\n            </div>\r\n                <h3>Amount: ${withdraw}</h3>\r\n            <div>\r\n            <div>Quick Cash</div>\r\n            <div  id = 'addStuff'> \r\n            <div>\r\n                <button onClick={()=>withdrawMoney(20)}>$20</button>\r\n                <button onClick={()=>withdrawMoney(80)}>$80</button>\r\n            </div>\r\n            <div>\r\n            <button onClick={()=>withdrawMoney(40)}>$40</button>\r\n            <button onClick={()=>withdrawMoney(100)}>$100</button>\r\n            </div>\r\n            <div>\r\n                <button onClick={()=>withdrawMoney(60)}>$60</button>\r\n                <button onClick={()=>withdrawMoney(200)}>$200</button>\r\n            </div>       \r\n            <div>\r\n                <input type = 'number' id = 'withdraw' onChange = {handleWithdraw}></input>\r\n                <button onClick = {()=>withdrawMoney(Number(document.getElementById('withdraw').value))}>Other Amount</button>\r\n            \r\n            </div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nfunction Deposit({handleDeposit, depositMoney, deposit}) {\r\n    return(\r\n        <div>\r\n            <h2>Deposit</h2>\r\n            <h3>Amount: ${deposit}</h3>\r\n            <input type = 'number' id = 'deposit' onChange = {handleDeposit}></input>\r\n            <button type = 'button' onClick = {depositMoney}>Deposit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction ATM() {\r\n\r\n    const [accountBalance, setAccountBalance] = useState(0);\r\n    const [withdraw, setWithdraw] = useState(0);\r\n    const [deposit, setDeposit] = useState(0);\r\n    const [accountHistory, setAccountHistory] = useState([]);\r\n    const [isWithdraw, setIsWithdraw] = useState(false);\r\n    const [isDeposit, setIsDeposit] = useState(false);\r\n\r\n    const withdrawMoney = (amount)=>{\r\n        if((accountBalance - amount) < 0){\r\n            return alert(`You don't have the funds!`)\r\n        }else{\r\n        let newAmount = accountBalance - amount;\r\n        setWithdraw(amount);\r\n        setAccountBalance(newAmount);\r\n        setAccountHistory([...accountHistory, {withdraw:amount,account:newAmount}]);\r\n        document.getElementById('withdraw').value = 0;\r\n        }\r\n    }\r\n\r\n    const handleWithdraw = ()=>{\r\n        let newwithdraw = document.getElementById('withdraw').value;\r\n        setWithdraw(newwithdraw);\r\n    }\r\n\r\n    const handleDeposit = ()=>{\r\n        let newDeposit = document.getElementById('deposit').value;\r\n        setDeposit(newDeposit);\r\n    }\r\n\r\n    const depositMoney = ()=>{\r\n        let deposit = Number(document.getElementById('deposit').value);\r\n        let newAmount = accountBalance + deposit;\r\n        setAccountBalance(newAmount);\r\n        setAccountHistory([...accountHistory, {deposit:deposit,account:newAmount}]);\r\n        setDeposit(0);\r\n        document.getElementById('deposit').value = 0;\r\n    }\r\n    const handleSelection = (event)=>{\r\n        if (event.target.style.backgroundColor === 'red'){\r\n            event.target.style.backgroundColor = 'white'\r\n            setIsWithdraw(false);\r\n            setIsDeposit(false);\r\n        }else{\r\n            event.target.style.backgroundColor = 'red';\r\n            if(event.target === document.getElementById('withdrawBtn') && document.getElementById('withdrawBtn').style.backgroundColor === 'red'){\r\n                document.getElementById('depositBtn').style.backgroundColor = 'white';\r\n                setIsWithdraw(true);\r\n                setIsDeposit(false);\r\n            }else{ \r\n                document.getElementById('depositBtn').style.backgroundColor = 'red'\r\n                document.getElementById('withdrawBtn').style.backgroundColor = 'white'\r\n                setIsWithdraw(false);\r\n                setIsDeposit(true);\r\n            }    \r\n        }\r\n\r\n    }\r\n\r\n    const handleHistory = accountHistory.map((item)=>{\r\n        return (\r\n            <li>{JSON.stringify(item)}</li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h1>Account Balance: ${accountBalance}</h1>\r\n            <div>\r\n            <div>Would you like to</div>\r\n            <div>\r\n                <button onClick={handleSelection} id = 'withdrawBtn'>Withdraw</button>\r\n                <button onClick={handleSelection} id = 'depositBtn'>Deposit</button>\r\n                ?\r\n            </div>\r\n            {isWithdraw && <Withdraw withdrawMoney = {withdrawMoney} handleWithdraw = {handleWithdraw} withdraw = {withdraw}/>}\r\n            {isDeposit && <Deposit depositMoney = {depositMoney} handleDeposit = {handleDeposit}  deposit = {deposit} />}\r\n            <div id = 'history'>\r\n                <ul>\r\n                    <h3>Account History</h3>\r\n                {handleHistory}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ATM\r\n","import React, {useState, useEffect, useContext, useReducer, useRef} from 'react'\r\nimport axios from 'axios'\r\nimport {Line} from 'react-chartjs-2'\r\nimport '../App.css'\r\n\r\nconst totalDataArr = [];\r\nconst nameArr = [];\r\n\r\nfunction useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }\r\n\r\nfunction MapCoins({ coinData, total }) {\r\n    const figureDom = (total, value)=>{\r\n        let percent = ((value/total)*100).toFixed(2);\r\n        return percent\r\n        }\r\n    let price =[]\r\n   \r\n    const genPrice = ()=>{\r\n        coinData.map(item=>{\r\n            price.push(item.priceUsd)\r\n        })\r\n    }\r\n    const genColor = (number, index)=>{\r\n        if(number>(price[index-1])){\r\n            document.getElementById('price').style.color = 'green';\r\n        }else{\r\n            document.getElementById('price').style.color = 'red';\r\n        }\r\n    }\r\n    \r\n    const genDataArr = ()=>{\r\n    const dataArr = [];\r\n    const pushData = ()=>{\r\n        coinData.map((item)=>{\r\n            dataArr.push(Number(item.priceUsd));\r\n            if(totalDataArr.length <100){\r\n            totalDataArr.push([]);\r\n            }\r\n            });\r\n        dataArr.map((item,index)=>{\r\n            let len = totalDataArr[index].length;\r\n            if(item != totalDataArr[index][len-1]){\r\n            totalDataArr[index].push(item);\r\n            }\r\n        nameArr.splice(len-1,1,len)\r\n        })\r\n        \r\n        };\r\n        \r\n        pushData();\r\n    }\r\n    genDataArr();\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <ol >\r\n                {coinData.map(coin=>  \r\n                    <li key ={coin.id} className = 'coin-div'>{coin.name} <span id='price'>${Number(coin.priceUsd).toLocaleString('en-US')}</span><ul>\r\n                    <li>Total MarketCap: ${Number(coin.marketCapUsd).toLocaleString('en-US')}</li>\r\n                    <li>Dominance: {figureDom(total, Number(coin.marketCapUsd))}%</li>\r\n                    <li>Current Supply: {Number(coin.supply).toLocaleString('en-US')}</li>\r\n                    <li>Max Supply: {Number(coin.maxSupply).toLocaleString('en-US')}</li>\r\n                    <li>24hr Change: {Number(coin.changePercent24Hr).toLocaleString('en-US')}%</li>\r\n                    </ul>\r\n                    <div className='line-graph'>\r\n                    <Line \r\n                        data={{\r\n\r\n                            labels: nameArr,\r\n                            datasets: [\r\n                              {\r\n                                label: coin.name,\r\n                                fill: false,\r\n                                lineTension: 0.1,\r\n                                backgroundColor: 'rgba(75,192,192,1)',\r\n                                borderColor: 'rgba(0,0,0,1)',\r\n                                borderWidth: 1,\r\n                                data: totalDataArr[coin.rank-1]\r\n                              }\r\n                            ]\r\n                          }}\r\n                        options={{\r\n                            title:{\r\n                                display:true,\r\n                                text: coin.name,\r\n                                fontSize:20\r\n                            },\r\n                            legend:{\r\n                            display:true,\r\n                            position:'right'\r\n                            \r\n                            }   \r\n                        }}\r\n                    />   \r\n                    </div>\r\n                    \r\n                </li>\r\n                )}\r\n            </ol>\r\n        </div>\r\n    \r\n    ) \r\n     \r\n}\r\n\r\nfunction FetchData() {\r\n    const [totalVal, setTotalVal] = useState(0)\r\n    const [coinData, setCoinData] = useState([]);\r\n    let [timer, setTimer] = useState(100);\r\n\r\n    \r\n    const fetchData = async ()=>{\r\n        let result = await axios(`https://api.coincap.io/v2/assets/`);\r\n        let resArr = [...result.data.data]\r\n        setCoinData(resArr)\r\n        setTimer(15000);\r\n    }\r\n    useEffect(()=>{\r\n        setTotalVal(()=>{\r\n            let total = 0;\r\n            coinData.map(item=>{\r\n                total += Number(item.marketCapUsd)\r\n            })\r\n            return total;\r\n        });         \r\n    },[coinData])\r\n\r\n    useInterval(()=>{\r\n        fetchData();\r\n    },timer)\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h1>Top 100 CryptoCurrencies</h1>\r\n            <h2>Total Market Val: ${totalVal.toLocaleString('en-US')}</h2>\r\n            <MapCoins coinData={coinData} total={totalVal} />   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FetchData\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import NavBar from './components/navbar.js';\nimport reportWebVitals from './reportWebVitals';\nimport ATM  from './components/ATM.js'\nimport FetchData from './components/FetchData.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <FetchData />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}